# IndexTTS Adapter Dockerfile for RTX 40 Series (4090, 4080, etc.)
# 自动下载版本：构建时自动下载 index-tts 和模型

FROM nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
ENV HF_ENDPOINT=https://hf-mirror.com

# 使用阿里云镜像源加速
RUN sed -i 's@//.*archive.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.list && \
    sed -i 's@//.*security.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.list

# 安装系统依赖（添加重试机制）
RUN apt-get update && \
    apt-get install -y --fix-missing \
    python3.10 \
    python3-pip \
    git \
    git-lfs \
    wget \
    curl \
    ffmpeg \
    libsndfile1 \
    && rm -rf /var/lib/apt/lists/*

# 创建工作目录
WORKDIR /code

# 安装 uv 包管理器
RUN pip3 install -U uv

# 克隆 index-tts 仓库（不包含 LFS 文件）
RUN echo "正在克隆 index-tts 仓库..." && \
    GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/index-tts/index-tts.git /code/index-tts && \
    echo "index-tts 仓库克隆完成"

# 进入 index-tts 目录
WORKDIR /code/index-tts

# 创建 checkpoints 目录并下载模型文件
RUN mkdir -p checkpoints && \
    echo "正在下载模型文件..." && \
    cd checkpoints && \
    curl -L -o config.yaml "https://hf-mirror.com/IndexTeam/IndexTTS-2/resolve/main/config.yaml" && \
    echo "下载 config.yaml 完成" && \
    curl -L -o model.pt "https://hf-mirror.com/IndexTeam/IndexTTS-2/resolve/main/model.pt" && \
    echo "下载 model.pt 完成" && \
    curl -L -o vocab.txt "https://hf-mirror.com/IndexTeam/IndexTTS-2/resolve/main/vocab.txt" && \
    echo "下载 vocab.txt 完成" && \
    curl -L -o README.md "https://hf-mirror.com/IndexTeam/IndexTTS-2/resolve/main/README.md" && \
    echo "模型文件下载完成" && \
    cd ..

# 使用 uv 安装 index-tts 依赖（跳过 deepspeed，不是必需的）
RUN echo "正在安装 index-tts 依赖..." && \
    uv sync --no-group deepspeed && \
    echo "index-tts 依赖安装完成"

# 复制适配器代码到 /code
WORKDIR /code
COPY api_server.py /code/api_server.py
COPY requirements.txt /code/requirements.txt

# 在 index-tts 环境中安装适配器依赖
WORKDIR /code/index-tts
RUN echo "正在安装适配器依赖..." && \
    uv pip install -r /code/requirements.txt && \
    echo "适配器依赖安装完成"

# 创建数据目录
RUN mkdir -p /code/data

# 暴露端口
EXPOSE 8080

# 启动命令（使用 uv run 运行）
WORKDIR /code
CMD ["uv", "run", "--directory", "/code/index-tts", "python", "/code/api_server.py"]

